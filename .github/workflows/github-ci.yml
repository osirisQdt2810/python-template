# =============================================================================
# COMPREHENSIVE CI/CD PIPELINE FOR PYTHON TEMPLATE PROJECT
# =============================================================================
# This workflow demonstrates professional CI/CD practices including:
# - Code quality checks (linting, formatting, type checking)
# - Multi-environment testing (Python 3.9, 3.10, 3.11)
# - Comprehensive testing with coverage analysis
# - Package building
# - Automated deployment with quality gates
# - Notification and reporting
# =============================================================================
name: CI/CD pipeline

# =============================================================================
# GRANT PERMISSION FOR WORKFLOW
# =============================================================================
# grant the auto-generated GITHUB_TOKEN the minimum extra scope required
# missing this leads to too many entries error because:
# If a workflow file doesn‚Äôt declare any permissions: block, the auto-generated GITHUB_TOKEN 
# defaults to read-only for the contents scope.
# The release API therefore returns HTTP 403 Forbidden.
permissions:
  contents: write    # allow creating / uploading a release
  packages: read     # keep other scopes at their default

# =============================================================================
# TRIGGER CONDITIONS
# =============================================================================
# When this workflow runs:
#   - On every push to main and develop branches (CI for production-ready code)
#   - On every pull request (CI for proposed changes)
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# =============================================================================
# GLOBAL ENVIRONMENT
# =============================================================================
env:
  # Python version matrix for testing
  PYTHON_VERSIONS: "['3.9', '3.10', '3.11']"
  # Default python version
  DEFAULT_PYTHON_VERSION: '3.9'
  # Coverage threshold - Build failed if below this score
  COVERAGE_THRESHOLD: 80
  # Package name
  PACKAGE_NAME: "pyproject-boilerplate"

# =============================================================================
# PIPELINE JOBS
#
# A job is a self-contained unit of work that runs on a runner (VM or container)
# Jobs as parallel states in our pipeline, each has its own environment, contains
# a sequence of steps.
# =============================================================================
jobs:
  # =============================================================================
  # JOB 1: CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    # Name displayed for the job in github UI
    name: "üîç Code Quality Checks"
    # Specify the type of virtual machine (runner) (or we can describe it as an image) to run the job 
    runs-on: ubuntu-latest
    # A job contains a sequence of steps running on that order. A step may be a built-in
    # github action, or a run of commands. By default, if a step failed, the following steps
    # won't be skipped.
    steps:
      # Check out repository
      - name: "Checkout repository"
        # 'uses': specifies that this step will use a built-in action, which could be thought as a pre-built plugin/library
        # 'actions/checkout@v4': action for checking out the repository into that runner so that the workflow can access it.
        uses: actions/checkout@v4
        # 'with': provides parameters to the action
        with:
          fetch-depth: 0  # checkout entire repository

      # Use custom setup python environment
      - name: "Setup python environment"
        uses: ./.github/actions/setup-python-env/
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
          build-package: false

      # Code quality 1: Running ruff lint
      - name: "Lint code (ruff check)"
        run: |
          # --output-format=github: makes ruff produce annotation directly on the pull-request files in github UI.
          ruff check --output-format=github .
      
      # # Code quality 2: Running ruff format
      # - name: "Format code (ruff format)"
      #   run: |
      #     ruff format --check --diff .

      # Code quality 3: Running type check
      - name: "Type checking (mypy)"
        run: |
          mypy src/ --strict --install-types --non-interactive --ignore-missing-imports --show-error-context

      # Code quality 4: Running docstrings
      - name: "Check docstrings"
        run: |
          docformatter src/ --recursive

  # =============================================================================
  # JOB 2: TEST WITH COMPREHENSIVE MATRIX 
  # =============================================================================
  test:
    # A way to define a matrix of variations/jobs. Through this 'strategy', github will setup the 'test' job
    # will run on a list of combinations (matrix), each run in separate, parallel and independent virtual machines (runners)
    # PURPOSE: test your code against a wide range of environments automatically.
    strategy:
      # 'fail-fast=false': If one matrix job is failed, github will not cancel the other running jobs.
      # This is essential to see all failure across all the different runtime environment.
      fail-fast: false
      # 'matrix': defines the different configurations to run this job
      matrix:
        # Based on the definitions below, there will be 3x3=9 jobs run in parallel
        # Job(i, j) will run in os (j) with python version (i)
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        # 'include': allows to add extra specific combination
        include:
          - python-version: "3.12"
            os: ubuntu-latest
            experimental: true    # a key-value pair, simply as a global environmental variables which we can access through ${{ matrix.experimental }} 

    name: "Test suite (Python: ${{ matrix.python-version }}, OS: ${{ matrix.os }})"
    runs-on: "${{ matrix.os }}"
    # a job dependency specifies that job 'test' only starts when 'code-quality' is successfully completed.
    needs: code-quality
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup python environment (version: ${{ matrix.python-version }})"
        uses: ./.github/actions/setup-python-env
        with:
          python-version: "${{ matrix.python-version }}"
          build-package: false

      - name: "Run test with coverage"  # If coverage < threshold the step fails and the job stops; Codecov upload is skipped but artifacts are still saved.
        run: |
          pytest --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} --verbose tests/

      - name: "Upload coverage reports to codecov for analysis"
        # 'if': makes the step conditional, which means it will only run if the statement is true.
        # Here, we only upload coverage reports from one specific job to avoid duplication.
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'   # avoid using "3.11" because of error: Unexpected symbol "3"
        # 'codecov-action': uis an action for uploading coverage reports to Codecov.io
        # codecov: a hosted services for collecting, parsing and visualizing code coverage metrics
        # we can get a dynamic badges by using: ![Coverage](https://codecov.io/gh/your-org/your-repo/branch/main/graph/badge.svg).
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # <--- Add this line
          file: ./coverage.xml      # path to the coverage report file
          flags: unittests          # flag to categorize coverage reports in Codecov UI
          name: python-template-project-coverage  # label name assigned to a specific report upload (we can have multiple codecov upload, for example integration test, frontend test...)
          fail_ci_if_error: false   # dont fail CI job if the Codecov upload fail

      - name: "Upload test results and coverage reports as artifacts for other jobs seeing"
        # this ensures the step still runs eventhough previous steps in the job are failed.
        if: always()
        # 'upload-artifact': is an action that store files from your current job run.
        # These files can be downloaded later from other jobs
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30    # how long to store the artifacts in day unit

  # # =============================================================================
  # # JOB 3 (OPTIONAL): SECURITY AND VULNERABLE SCANNING
  # # =============================================================================
  # security:

  # =============================================================================
  # JOB 4: BUILD AND INSTALL PACKAGE 
  # =============================================================================
  build:
    name: "Builds and installs python package"
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Build python interpreter (version {{ inputs.python-version }})"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: requirements/dev-requirements.in

      # Use custom setup python environment
      - name: "Setup python environment"
        uses: ./.github/actions/setup-python-env/
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
          build-package: true
          
      # Create distribution packages
      - name: "Build packages"
        run: |
          # clean old build artifacts
          rm -rf dist/ build/ *.egg-info/
          # the standard common to build a package
          python -m build
          # verifies that the built packages are valid and can be uploaded to PyPI without issues
          pip install twine
          twine check dist/*
          # list the contents to see what was built
          ls -l dist/

      # Upload build artifacts
      - name: "Upload distribution as artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # =============================================================================
  # JOB 5: RELEASE AND DEPLOYMENT 
  # 
  # This job is only triggered when the workflow is pushing a new tag version v* 
  # Note that if we deleted the remote tags, the release version is also eliminated as well.
  # =============================================================================
  deploy:
    name: "Package release and deployment "
    runs-on: ubuntu-latest
    needs: [ build ]
    # The gatekeeper for deployment. The job will only run if:
    # 1. The event triggered is 'push'
    # 2. The git reference ('ref') that was pushed starts with 'refs/tags/v' (a tag version)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      # The URL will be displayed on the workflow run page.
      url: https://pypi.org/project/${{ env.PACKAGE_NAME }}

    steps:
      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: python-package  # just same as uploading
          path: dist/
      
      # softprops/action-gh-release calls the API endpoint POST /repos/{owner}/{repo}/releases.
      # That endpoint requires the ‚Äúcontents: write‚Äù scope.
      - name: "Create a Github release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          # Tell GitHub to auto-fill the release body with a changelog (merged PRs, commits, contributors) instead of writing it manually.
          generate_release_notes: true

      - name: "Deploy to Pypi registry"
        if: always()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # The password for PyPI should be stored as a secret in your GitHub repository settings.
          # '${{ secrets.VARIABLE_NAME }}' is the secure way to access secrets.
          password: ${{ secrets.PYPI_API_TOKEN }}
          # You can uncomment the next line to deploy to the Test PyPI registry first.
          # Note that comment the next line will make step failed in this context project
          # because another project with the same name already exists. And because this is
          # another service used for testing pypi, so you also need to create a token for this service,
          # naming it as TEST_PYPI_API_TOKEN and replacing the password field above.
          # repository_url: https://test.pypi.org/legacy/

  # ===========================================================================
  # JOB 6: NOTIFICATION AND REPORTING
  # ===========================================================================
  report:
    name: "üìä Generate Pipeline Report"
    runs-on: ubuntu-latest
    # This job needs the results from all previous major jobs.
    needs: [code-quality, test, build]
    # 'if: always()': This job should run regardless of whether the other jobs
    # succeeded or failed, so it can report on the final status.
    if: always()
    
    steps:
    - name: "üì• Checkout Repository"
      uses: actions/checkout@v4
    
    - name: "üìä Pipeline Summary"
      run: |
        # '$GITHUB_STEP_SUMMARY' is a special file. Anything written to it will
        # appear as a formatted summary on the GitHub Actions workflow run page.
        echo "## üèóÔ∏è CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        # '${{ needs.job_name.result }}' is how you access the final status
        # (e.g., 'success', 'failure', 'cancelled') of a job this one 'needs'.
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìà Key Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage Threshold**: ${{ env.COVERAGE_THRESHOLD }}%" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Versions Tested**: ${{ env.PYTHON_VERSIONS }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Conditionally add more details to the summary if a job failed.
        if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "‚ùå **Code Quality Issues**: Check linting, formatting, or type errors" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "‚ùå **Test Failures**: Check test results or coverage below threshold" >> $GITHUB_STEP_SUMMARY
        fi